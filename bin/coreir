#!/usr/bin/env python
"""
Wrapper script that uses statically compiled coreir binary distribution only if
coreir is not already present in the path
"""

import platform
import sys
import os
import coreir
import subprocess
import shutil



def is_binary(path):
    # adapted from https://stackoverflow.com/a/7392391
    textchars = bytearray({7,8,9,10,12,13,27} | set(range(0x20, 0x100)) - {0x7f})
    is_binary_string = lambda bytes: bool(bytes.translate(None, textchars))
    with open(path, "rb") as f:
        try:
            return is_binary_string(f.read(1024))
        except UnicodeDecodeError:
            # assume binary
            return True

binary_path = None
for line in os.popen("which -a coreir").read().splitlines():
    if is_binary(line):
        binary_path = line
        break


if binary_path is None:
    _system = platform.system()
    if _system == "Linux":
        LIBRARY_PATH_VAR = "LD_LIBRARY_PATH"
    elif _system == "Darwin":
        LIBRARY_PATH_VAR = "DYLD_LIBRARY_PATH"
    else:
        raise NotImplementedError(_system)

    path = os.path.abspath(os.path.dirname(coreir.__file__))
    coreir_binary = os.path.join(path, "coreir")
    env = dict(os.environ)
    env[LIBRARY_PATH_VAR] = path
    subprocess.call([coreir_binary] + sys.argv[1:], env=env)
else:
    subprocess.call([binary_path] + sys.argv[1:])
